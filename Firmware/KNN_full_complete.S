.data
train_data:
    # Image 14 - Label 1
    .byte 1
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 137, 0, 0, 0
    .byte 0, 0, 0, 59, 177, 0, 0, 0, 0, 0, 0, 81, 143, 0, 0, 0
    .byte 0, 0, 0, 101, 137, 0, 0, 0, 0, 0, 0, 138, 137, 0, 0, 0
    .byte 0, 0, 0, 115, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    # Image 1 - Label 3
    .byte 3
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 198, 128, 3, 0, 0
    .byte 0, 0, 5, 42, 159, 83, 0, 0, 0, 0, 55, 185, 226, 125, 0, 0
    .byte 0, 0, 44, 112, 65, 200, 26, 0, 0, 10, 26, 5, 91, 200, 16, 0
    .byte 0, 5, 159, 206, 151, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    # Image 2 - Label 8
    .byte 8
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 69, 102, 56, 0
    .byte 0, 0, 15, 183, 149, 220, 30, 0, 0, 0, 25, 197, 177, 89, 0, 0
    .byte 0, 0, 6, 187, 178, 7, 0, 0, 0, 0, 130, 86, 179, 21, 0, 0
    .byte 0, 0, 204, 168, 108, 0, 0, 0, 0, 0, 24, 16, 0, 0, 0, 0
    # Image 3 - Label 9
    .byte 9
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 11, 0, 0
    .byte 0, 0, 24, 177, 225, 137, 0, 0, 0, 0, 138, 126, 177, 119, 0, 0
    .byte 0, 0, 118, 235, 226, 30, 0, 0, 0, 0, 2, 107, 151, 0, 0, 0
    .byte 0, 0, 0, 167, 113, 0, 0, 0, 0, 0, 0, 88, 18, 0, 0, 0
    # Image 4 - Label 3
    .byte 3
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 193, 217, 145, 4, 0
    .byte 0, 0, 23, 65, 16, 218, 64, 0, 0, 0, 0, 44, 179, 234, 4, 0
    .byte 0, 2, 0, 112, 136, 228, 20, 0, 0, 153, 45, 27, 152, 150, 0, 0
    .byte 0, 100, 216, 193, 106, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    # Image 5 - Label 9
    .byte 9
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 16, 0, 0
    .byte 0, 0, 8, 126, 94, 148, 0, 0, 0, 0, 97, 51, 48, 182, 0, 0
    .byte 0, 0, 154, 79, 150, 111, 0, 0, 0, 0, 73, 70, 129, 13, 0, 0
    .byte 0, 0, 0, 23, 135, 0, 0, 0, 0, 0, 0, 41, 24, 0, 0, 0
    # Image 6 - Label 7
    .byte 7
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 18, 0, 7, 9, 0
    .byte 0, 0, 164, 182, 134, 219, 55, 0, 0, 42, 224, 71, 62, 192, 0, 0
    .byte 0, 96, 61, 0, 139, 109, 0, 0, 0, 0, 0, 32, 211, 21, 0, 0
    .byte 0, 0, 2, 192, 148, 3, 0, 0, 0, 0, 0, 72, 81, 2, 0, 0
    # Image 10 - Label 2
    .byte 2
    .byte 0, 0, 0, 19, 17, 1, 0, 0, 0, 0, 28, 187, 141, 94, 0, 0
    .byte 0, 0, 84, 51, 8, 126, 0, 0, 0, 0, 76, 32, 72, 97, 0, 0
    .byte 0, 0, 104, 121, 162, 15, 93, 1, 0, 0, 171, 216, 132, 165, 77, 0
    .byte 0, 0, 85, 26, 86, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    # Image 8 - Label 5
    .byte 5
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 94, 93, 121, 85, 1
    .byte 0, 0, 106, 155, 42, 8, 4, 0, 0, 0, 62, 122, 16, 0, 0, 0
    .byte 0, 0, 1, 40, 118, 136, 20, 0, 0, 4, 0, 0, 3, 119, 58, 0
    .byte 0, 39, 126, 126, 144, 84, 0, 0, 0, 0, 12, 33, 8, 0, 0, 0
    # Image 9 - Label 4
    .byte 4
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 7, 12, 67, 0, 0
    .byte 0, 0, 147, 54, 22, 164, 0, 0, 0, 0, 192, 18, 26, 198, 15, 0
    .byte 0, 0, 192, 128, 183, 234, 32, 0, 0, 0, 47, 122, 152, 140, 0, 0
    .byte 0, 0, 0, 0, 140, 64, 0, 0, 0, 0, 0, 0, 11, 4, 0, 0

# ===== TEST DATA: 1 image (label + 64 pixels) =====
test_data:
    # Image 1 - Label 2
    .byte 2
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 165, 42, 0, 0
    .byte 0, 0, 0, 48, 7, 118, 0, 0, 0, 0, 0, 0, 2, 112, 0, 0
    .byte 0, 0, 12, 95, 163, 93, 0, 0, 0, 0, 123, 128, 127, 44, 0, 0
    .byte 0, 0, 120, 112, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
# ===== DISTANCE-LABEL PAIRS (2 words per image * 10) =====
dist_label_pairs:
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0
    .word 0, 0

# # ===== LABEL VOTE COUNTS (labels 0 to 9) =====
# label_votes:
#     .word 0,0,0,0,0,0,0,0,0,0

# # ===== OUTPUT =====
# place:
#     .word 99
# predicted_label:
#     .word 0,0,0

placeholder:
    .byte 0
    
    
output_dists:
    .word 0,0,0,0,0,0,0,0,0,0 # 10 distances
    
label_counts:
    .word 0,0,0,0,0,0,0,0,0,0
    
Predicted_label:
    .word 0

.text
.globl main
main:
    # Setup
    la   x4, train_data
    la   x5, test_data
    la   x6, output_dists
    li   x7, 10       # N
    li   x28, 5       # K
    li   x8, 0        # idx=0

# 1. Compute (distance,label) for all trains
train_loop:
    bge  x8, x7, step_select
    lb   x12, 0(x4)
    addi x13, x4, 1
    addi x14, x5, 1
    li   x15, 0
    li   x16, 0
dist_loop:
    li   x17, 64
    bge  x16, x17, do_store
    lbu  x18, 0(x13)
    lbu  x19, 0(x14)
    sub  x20, x18, x19
    mul  x20, x20, x20
    add  x15, x15, x20
    addi x13, x13, 1
    addi x14, x14, 1
    addi x16, x16, 1
    j    dist_loop
do_store:
    slli x21, x8, 3
    add  x22, x6, x21
    sw   x15, 0(x22)
    sw   x12, 4(x22)
    addi x4, x4, 65
    addi x8, x8, 1
    j    train_loop

# 2. Select top-K with replacement
step_select:
    add  x8, x28, zero
sel_loop:
    bge  x8, x7, step_sort
    li   x9, 0
    li   x10, -1
    li   x11, -1
ms_loop:
    bge  x9, x28, cmp_new
    slli x12, x9, 3
    add  x13, x6, x12
    lw   x14, 0(x13)
    blt  x14, x10, nxt1
    add  x10, x14, zero
    add  x11, x9, zero
nxt1:
    addi x9, x9, 1
    j    ms_loop
cmp_new:
    slli x12, x8, 3
    add  x13, x6, x12
    lw   x14, 0(x13)
    blt  x14, x10, do_rep
    addi x8, x8, 1
    j    sel_loop
do_rep:
    slli x15, x11, 3
    add  x16, x6, x15
    lw   x17, 0(x13)
    lw   x18, 4(x13)
    sw   x17, 0(x16)
    sw   x18, 4(x16)
    addi x8, x8, 1
    j    sel_loop

# 3. Bubble-sort top-K ascending
step_sort:
    li   x17, 0
out_loop:
    bge  x17, x28, step_vote
    li   x18, 0
in_loop:
    li   x19, 1
    sub  x19, x28, x19
    bge  x18, x19, inc_out
    slli x20, x18, 3
    add  x21, x6, x20
    addi x22, x21, 8
    lw   x23, 0(x21)
    lw   x24, 0(x22)
    blt  x23, x24, cont
    lw   x25, 4(x21)
    lw   x26, 4(x22)
    sw   x24, 0(x21)
    sw   x23, 0(x22)
    sw   x26, 4(x21)
    sw   x25, 4(x22)
cont:
    addi x18, x18, 1
    j    in_loop
inc_out:
    addi x17, x17, 1
    j    out_loop

# 4. Vote or fallback nearest
step_vote:
    la   x20, label_counts
    li   x21, 0
clr_loop:
    li   x27, 10
    bge  x21, x27, tally
    sw   x0, 0(x20)
    addi x20, x20, 4
    addi x21, x21, 1
    j    clr_loop

tally:
    li   x21, 0
    li   x22, 0        # max vote count
    li   x23, -1       # predicted label
v_loop:
    bge  x21, x28, finish
    slli x24, x21, 3
    add  x25, x6, x24
    lw   x26, 4(x25)         # label

    li   x30, 9
    bgt  x26, x30, next_vote

    slli x27, x26, 2
    la   x29, label_counts
    add  x29, x29, x27
    lw   x30, 0(x29)
    addi x30, x30, 1
    sw   x30, 0(x29)

    blt  x22, x30, update_vote
    j    next_vote

update_vote:
    add  x22, x30, x0
    add  x23, x26, x0

next_vote:
    addi x21, x21, 1
    j    v_loop

finish:
    li   x24, 1
    bne  x22, x24, store
    lw   x23, 4(x6)     # fallback to nearest label

store:
    la   x25, Predicted_label
    sw   x23, 0(x25)

end:
    nop

